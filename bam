#!/usr/bin/env python

# Name:         bam (BMC Ansible/Automation Module)
# Version:      0.1.0
# Release:      1
# License:      CC-BA (Creative Commons By Attribution)
#               http://creativecommons.org/licenses/by/4.0/legalcode
# Group:        System
# Source:       N/A
# URL:          N/A
# Distribution: UNIX
# Vendor:       Lateral Blast
# Packager:     Richard Spindler <richard@lateralblast.com.au>
# Description:  BMC Ansible/Automation Module

#from ansible.constants import mk_boolean
#from ansible.module_utils.basic import *
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type
from ansible.module_utils.basic import AnsibleModule
import subprocess
import pexpect
import inspect
import ssl
import os
import re
from os.path import exists

DOCUMENTATION = r'''
---
module: bam
version_added: "post 2.8.0"
short_description: Automate BMC command line
dewscription: 
  - Automate BMC configuration
options:
  bmccommand;
    description:
      - Command to run on BMC
  bmchostname:
    description:
      - hostname/IP of BMC to connect to
  bmcpassword;
    description:
      - Passwword for BMC
  bmcusername:
    description:
      - Username for BMC
  bmctype:
    description:
      - Set model of BMC, e.g. iDRAC
  execute:
    description:
      - Whether to execute ansible stanza (useful for debugging)
  function:
    description:
      - Action to perform (e.g. get/set)
  keyindex:
    description:
      - Key number in iDRAC key index
  method:
    description:
      - Method to use to set value, e.g. SSH, or racadm
  object:
    description:
      - Parameter/object to be set , e.g. cfgIpmiLanEnable
  objectgroup:
    description:
      - Component that is to have it's object set, e.g. cfgIpmi - Used with older versions of racadm
  options:
    description:
      - Additional options to add to command line
  outputfile:
    description:
      - Output file
  outputtype:
    description:
      - Output type (e.g. XML)
  powerstate:
    description:
      - Power state (used with some iDRAC commands)
  sharelocation:
    description:
      - Share location
  sharepassword:
    description:
      - Share password
  shareusername:
    description:
      - Share username 
  shutdowntype:
    description:
      - Shutdown type (used with some iDRAC commands)
  sshkeyfile:
    description:
      - SSH keyfile 
  sshkeytext:
    description:
      - SSH key test 
  sshkeytype:
    description:
      - SSH key type
  usesshkey:
    description:
      - Use SSH key 
  value:
    description:
      - Used with set object function, e.g. Enabled
  waittime:
    description:
      - Wait time before executing command (used with some iDRAC commands)
'''

EXAMPLES = r'''
#  Enabling IPMI over LAN
- name: Enable IPMI over LAN via racadm using old method
  bam:
    bmctype:      idrac
    method:       racadm
    bmchostname:  idrac001.net
    bmcusername:  root
    bmcpassword:  calvin
    function:       set
    objectgroup:  cfgIpmiLan
    object:       cfgIpmiLanEnable
    value:        1
- name: Enable IPMI over LAN via racadm using new method
  bam:
    bmctype:      idrac
    method:       racadm
    bmxhostname:  idrac001.net
    bmcusername:  root
    bmcpassword:  calvin
    function:       set
    object:       iDRAC.IPMILan.Enable
    value:        Enabled
'''

# Initiate SSH Session

def start_ssh_session(module):
  ssh_command = "ssh -o StrictHostKeyChecking=no"
  ssh_command = "%s %s@%s" % (ssh_command, module.params['bmcusername'], module.params['bmchostname'])
  ssh_session = pexpect.spawn(ssh_command)
  ssh_session.expect("assword: ")
  ssh_session.sendline(module.params['bmcpassword'])
  return(ssh_session)

# Parse simplified group tags

def parse_group(module):
  if re.search(r"lan|network",module.params['objectgroup']):
    if re.search(r"ipmi",module.params['objectgroup']):
      module.params['objectgroup'] = "cfgIpmiLan"
    else:
      module.params['objectgroup'] = "cfgLanNetworking"
  if re.search(r"server",module.params['objectgroup']):
    module.params['objectgroup'] = "cfgServerInfo"
  if re.search(r"serial",module.params['objectgroup']):
    if re.search(r"ipmi",module.params['objectgroup']):
      module.params['objectgroup'] = "cfgIpmiSerial"
    else:
      module.params['objectgroup'] = "cfgSerial"
  return(module)

# Set/get iDRAC value 

def get_set_idrac_value(module, switches):
  subroutine = inspect.stack()[0][3]
  if module.params['function'] == "execute":
    command = module.params['bmccommand']
  else:
    command = module.params['function']
    if module.params['objectgroup'] == None:
      if not module.params['subfunction'] == None:
        command = "%s %s" % (command, module.params['subfunction'])
      if not module.params['action'] == None:
        command = "%s %s" % (command, module.params['action'])
      if not module.params['object'] == None:
        command = "%s %s" % (command, module.params['object'])
      for key, value in switches.items():
        if not module.params[key] == None:
          if re.search(r"^true$|^yes$", str(module.params[key]).lower()) or module.params[key] == True:
            command = "%s %s" % (command, value)
          else:
            if not re.search(r"^false$|^no$", str(module.params[key]).lower()) and not module.params[key] == False:
              command = "%s %s%s" % (command, value, module.params[key])
    else:
      module = parse_group(module)
      if module.params['function'] == "set":
        command = "config -g %s -o %s %s" % (module.params['objectgroup'], module.params['object'], module.params['value'])
      else:
        command = "getconfig -g %s -o %s" % (module.params['objectgroup'], module.params['object'])
  if not module.params['options'] == None:
    command = "%s %s" % (command, module.params['options'])
  if module.params['execute'] == True:
    if not module.params['function'] == "execute":
      command = "racadm %s" % (command)
    if module.params['method'] == "ssh":
      if module.params['usesshkey'] == True:
        command = "ssh -o StrictHostKeyChecking=no -i %s %s@%s '%s'" % (module.params['sshkeyfile'], module.params['bmcusername'], module.params['bmchostname'], command)
        process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
        output  = process.stdout
        if module.params['function'] == "get":
          if module.params['objectgroup'] == None:
            output = output.split("\n")[1]
          else:
            output  = output.split("\n")[0]
        if re.search("=", output):
          output = output.split("=")[1]
        return(output, process.stderr, process.returncode, command, subroutine)
      else:
        ssh_session = start_ssh_session(module)
        ssh_session.expect("/admin1-> ")
        ssh_session.sendline(command)
        ssh_session.expect("/admin1-> ")
        output = ssh_session.before
        output = output.decode()
        if module.params['function'] == "get":
          if module.params['objectgroup'] == None:
            output = output.split("\n")[1]
          else:
            output  = output.split("\n")[0]
        ssh_session.close()
        if re.search("=", output):
          output = output.split("=")[1]
        return(output, "", 0, command, subroutine)
    else:
      command = "racadm -r %s -u %s -p %s %s" % (module.params['bmchostname'], module.params['bmcusername'], module.params['bmcpassword'], command)
      process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
      return(process.stdout, process.stderr, process.returncode, command, subroutine)
  else:
    return("", "", 0, command, subroutine)
  return

# Main routine - Get anisible module objects, call functions and exit

def main():
  fields = {
    'action':               { 'default':  None,    'type': 'str' },
    'alertcategory':        { 'default':  None,    'type': 'str' },
    'apply':                { 'default':  None,    'type': 'str' },
    'assign':               { 'default':  None,    'type': 'str' },
    'binarymode':           { 'default':  False,   'type': 'str' },
    'blink':                { 'default':  None,    'type': 'str' },
    'bmccommand':           { 'default':  None,    'type': 'str' },
    'bmchostname':          { 'default':  None,    'type': 'str' },
    'bmcpassword':          { 'default':  None,    'type': 'str' },
    'bmcusername':          { 'default':  None,    'type': 'str' },
    'bmctype':              { 'default':  None,    'type': 'str' },
    'cancelbgi':            { 'default':  None,    'type': 'str' },
    'cancelcheck':          { 'default':  None,    'type': 'str' },
    'cancelrebuild':        { 'default':  None,    'type': 'str' },
    'capacityexpansion':    { 'default':  None,    'type': 'str' },
    'ccheck':               { 'default':  None,    'type': 'str' },
    'certtype':             { 'default':  None,    'type': 'str' },
    'city':                 { 'default':  None,    'type': 'str' },
    'clearconfig':          { 'default':  None,    'type': 'str' },
    'closeallsessions':     { 'default':  False,   'type': 'str' },
    'compact':              { 'default':  False,   'type': 'str' },
    'company':              { 'default':  None,    'type': 'str' },
    'component':            { 'default':  None,    'type': 'str' },
    'connectimage':         { 'default':  False,   'type': 'str' },
    'converttononraid':     { 'default':  None,    'type': 'str' },
    'converttoraid':        { 'default':  None,    'type': 'str' },
    'count':                { 'default':  None,    'type': 'str' },
    'country':              { 'default':  None,    'type': 'str' },
    'createsecuritykey':    { 'default':  None,   'type': 'str' },
    'cryptographicerase':   { 'default':  None,   'type': 'str' },
    'current':              { 'default':  False,   'type': 'str' },
    'datetime':             { 'default':  False,   'type': 'str' },
    'dhcp':                 { 'default':  False,   'type': 'str' },
    'dhcp6':                { 'default':  False,   'type': 'str' },
    'discardcache':         { 'default':  None,    'type': 'str' },
    'disconnectimage':      { 'default':  False,   'type': 'str' },
    'displaycommon':        { 'default':  False,   'type': 'str' },
    'displaybios':          { 'default':  False,   'type': 'str' },
    'displaycpld':          { 'default':  False,   'type': 'str' },
    'displayidsdm':         { 'default':  False,   'type': 'str' },
    'displayidrac':         { 'default':  False,   'type': 'str' },
    'displayipv4':          { 'default':  False,   'type': 'str' },
    'displayipv6':          { 'default':  False,   'type': 'str' },
    'displaynumber':        { 'default':  False,   'type': 'str' },
    'displayonlyraw':       { 'default':  False,   'type': 'str' },
    'displaytotal':         { 'default':  False,   'type': 'str' },
    'delete':               { 'default':  False,   'type': 'str' },
    'deletesecuritykey':    { 'default':  None,    'type': 'str' },
    'deletevd':             { 'default':  None,    'type': 'str' },
    'diskcachepolicy':      { 'default':  None,    'type': 'str' },
    'displayraw':           { 'default':  False,   'type': 'str' },
    'dom':                  { 'default':  None,    'type': 'str' },
    'dow':                  { 'default':  None,    'type': 'str' },
    'downloadlocation':     { 'default':  None,    'type': 'str' },
    'dstpd':                { 'default':  None,    'type': 'str' },
    'enable6':              { 'default':  False,   'type': 'str' },
    'encryptvd':            { 'default':  None,    'type': 'str' },
    'entitlementid':        { 'default':  None,    'type': 'str' },
    'execute':              { 'default':  True,    'type': 'str' },
    'expirationtime':       { 'default':  None,    'type': 'str' },
    'filename':             { 'default':  None,    'type': 'str' },
    'filter':               { 'default':  None,    'type': 'str' },
    'force':                { 'default':  False,   'type': 'str' },
    'forceoffline':         { 'default':  None,    'type': 'str' },
    'forceonline':          { 'default':  None,    'type': 'str' },
    'forcereset':           { 'default':  False,   'type': 'str' },
    'format':               { 'default':  None,    'type': 'str' },
    'fqdd':                 { 'default':  None,    'type': 'str' },
    'fqdds':                { 'default':  False,   'type': 'str' },
    'frequency':            { 'default':  None,    'type': 'str' },
    'function':             { 'default':  None,    'type': 'str' },
    'get':                  { 'default':  False,    'type': 'str' },
    'groupname':            { 'default':  None,    'type': 'str' },
    'hotspare':             { 'default':  None,    'type': 'str' },
    'keyindex':             { 'default':  None,    'type': 'str' },
    'ignoreheaders':        { 'default':  False,   'type': 'str' },
    'importconfig':         { 'default':  None,    'type': 'str' },
    'index':                { 'default':  None,    'type': 'str' },
    'init':                 { 'default':  None,    'type': 'str' },
    'jobid':                { 'default':  None,    'type': 'str' },
    'jobindex':             { 'default':  None,    'type': 'str' },
    'key':                  { 'default':  None,    'type': 'str' },
    'keysubtype':           { 'default':  None,    'type': 'str' },
    'keytext':              { 'default':  None,    'type': 'str' },
    'keytype':              { 'default':  None,    'type': 'str' },
    'ledstate':             { 'default':  None,    'type': 'str' },
    'level':                { 'default':  None,    'type': 'str' },
    'location':             { 'default':  None,    'type': 'str' },
    'logtype':              { 'default':  None,    'type': 'str' },
    'mdtype':               { 'default':  None,    'type': 'str' },
    'messageid':            { 'default':  None,    'type': 'str' },
    'method':               { 'default': 'ssh',    'type': 'str' },
    'mode':                 { 'default':  None,    'type': 'str' },
    'modifysecuritykey':    { 'default':  None,    'type': 'str' },
    'module':               { 'default':  None,    'type': 'str' },
    'name':                 { 'default':  None,    'type': 'str' },
    'newpasswd':            { 'default':  None,    'type': 'str' },
    'newraidlevel':         { 'default':  None,    'type': 'str' },
    'object':               { 'default':  None,    'type': 'str' },
    'objectgroup':          { 'default':  None,    'type': 'str' },
    'override':             { 'default':  False,   'type': 'str' },
    'optimized':            { 'default':  False,   'type': 'str' },
    'options':              { 'default':  None,    'type': 'str' },
    'outputfile':           { 'default':  None,    'type': 'str' },
    'outputtype':           { 'default':  None,    'type': 'str' },
    'panumber':             { 'default':  None,    'type': 'str' },
    'passphrase':           { 'default':  None,    'type': 'str' },
    'passwd':               { 'default':  None,    'type': 'str' },
    'password':             { 'default':  None,    'type': 'str' },
    'patrolread':           { 'default':  None,    'type': 'str' },
    'pcode':                { 'default':  None,    'type': 'str' },
    'pdkey':                { 'default':  None,    'type': 'str' },
    'pending':              { 'default':  False,   'type': 'str' },
    'pfname':               { 'default':  None,    'type': 'str' },
    'plname':               { 'default':  None,    'type': 'str' },
    'pmailid':              { 'default':  None,    'type': 'str' },
    'pmnumber':             { 'default':  None,    'type': 'str' },
    'powerstate':           { 'default':  None,    'type': 'str' },
    'preparetoremove':      { 'default':  None,    'type': 'str' },
    'propertyname':         { 'default':  None,    'type': 'str' },
    'proxyhostname':        { 'default':  None,    'type': 'str' },
    'proxypassword':        { 'default':  None,    'type': 'str' },
    'proxyport':            { 'default':  None,    'type': 'str' },
    'proxytype':            { 'default':  None,    'type': 'str' },
    'proxyusername':        { 'default':  None,    'type': 'str' },
    'put':                  { 'default':  False,   'type': 'str' },
    'raidlevel':            { 'default':  False,   'type': 'str' },
    'raidlevelmigration':   { 'default':  False,   'type': 'str' },
    'readpolicy':           { 'default':  None,    'type': 'str' },
    'reboottype':           { 'default':  None,    'type': 'str' },
    'rebuild':              { 'default':  None,    'type': 'str' },
    'recordperline':        { 'default':  False,   'type': 'str' },
    'records':              { 'default':  None,    'type': 'str' },
    'refkey':               { 'default':  None,    'type': 'str' },
    'rekey':                { 'default':  None,    'type': 'str' },
    'renamevd':             { 'default':  None,    'type': 'str' },
    'repeat':               { 'default':  None,    'type': 'str' },
    'replacephysicaldisk':  { 'default':  None,    'type': 'str' },
    'resetconfig':          { 'default':  None,    'type': 'str' },
    'rollback':             { 'default':  False,   'type': 'str' },
    'sanumber':             { 'default':  None,    'type': 'str' },
    'sekmindex':            { 'default':  None,    'type': 'str' },
    'sekmindex':            { 'default':  None,    'type': 'str' },
    'sekmserver1':          { 'default':  None,    'type': 'str' },
    'sekmserver2':          { 'default':  None,    'type': 'str' },
    'sessionid':            { 'default':  None,    'type': 'str' },
    'sessionusername':      { 'default':  None,    'type': 'str' },
    'setbootvd':            { 'default':  None,    'type': 'str' },
    'setencryptionmode':    { 'default':  None,    'type': 'str' },
    'sfname':               { 'default':  None,    'type': 'str' },
    'sharelocation':        { 'default':  None,    'type': 'str' },
    'sharepassword':        { 'default':  None,    'type': 'str' },
    'shareusername':        { 'default':  None,    'type': 'str' },
    'shutdowntype':         { 'default':  None,    'type': 'str' },
    'size':                 { 'default':  None,    'type': 'str' },
    'slname':               { 'default':  None,    'type': 'str' },
    'smailid':              { 'default':  None,    'type': 'str' },
    'smnumber':             { 'default':  None,    'type': 'str' },
    'speed':                { 'default':  None,    'type': 'str' },
    'sshkeyfile':           { 'default':  None,    'type': 'str' },
    'sshkeytext':           { 'default':  None,    'type': 'str' },
    'sshkeytype':           { 'default': 'rsa',    'type': 'str' },
    'start':                { 'default':  None,    'type': 'str' },
    'start-date':           { 'default':  None,    'type': 'str' },
    'start-time':           { 'default':  None,    'type': 'str' },
    'starttime':            { 'default':  None,    'type': 'str' },
    'state':                { 'default':  None,    'type': 'str' },
    'static':               { 'default':  False,   'type': 'str' },
    'static6':              { 'default':  False,   'type': 'str' },
    'status':               { 'default':  False,    'type': 'str' },
    'street1':              { 'default':  None,    'type': 'str' },
    'street2':              { 'default':  None,    'type': 'str' },
    'stripesize':           { 'default':  None,    'type': 'str' },
    'subfunction':          { 'default':  None,    'type': 'str' },
    't10pienable':          { 'default':  False,   'type': 'str' },
    'tftpserver':           { 'default':  None,    'type': 'str' },
    'transactionid':        { 'default':  None,    'type': 'str' },
    'time':                 { 'default':  None,    'type': 'str' },
    'uid':                  { 'default':  None,    'type': 'str' },
    'unblink':              { 'default':  None,    'type': 'str' },
    'unlock':               { 'default':  None,    'type': 'str' },
    'update':               { 'default':  False,   'type': 'str' },
    'userindex':            { 'default':  None,    'type': 'str' },
    'username':             { 'default':  None,    'type': 'str' },
    'usesshkey':            { 'default':  True,    'type': 'str' },
    'value':                { 'default':  None,    'type': 'str' },
    'vdkey':                { 'default':  None,    'type': 'str' },
    'view':                 { 'default':  False,   'type': 'str' },
    'waittime':             { 'default':  None,    'type': 'str' },
    'wom':                  { 'default':  None,    'type': 'str' },
    'writepolicy':          { 'default':  None,    'type': 'str' },
    'zip':                  { 'default':  None,    'type': 'str' }
  }
  module = AnsibleModule(argument_spec = fields)

  stdout  = ""
  stderr  = ""
  rc      = 1
  command = ""
  subroutine = ""

  if module.params['bmctype'] == "idrac":
    switches = dict([
    ('action',               '-a '),
    ('alertcategory',        '-c '),
    ('apply',                '-a '),
    ('assign',               '-assign '),
    ('binarymode',           '-b '),
    ('blink',                'blink:'),
    ('cancelbgi',            'cancelbgi:'),
    ('cancelcheck',          'cancelcheck:'),
    ('cancelrebuild',        'cancelrebuild:'),
    ('capacityexpansion',    'capacityexpansion:'),
    ('ccheck',               'ccheck:'),
    ('certtype',             '-t '),
    ('city',                 '-city '),
    ('clearconfig',          'clearconfig:'),
    ('closeallsessions',     '-a '),
    ('compact',              '-c '),
    ('company',              '-company '),
    ('connectimage',         '-c '),
    ('converttononraid',     'converttononraid:'),
    ('converttoraid',        'converttoraid:'),
    ('count',                '-c '),
    ('country',              '-country '),
    ('createsecuritykey',    'createsecuritykey:'),
    ('cryptographicerase',   'cryptographicerase:'),
    ('current',              '-current '),
    ('datetime',             '-d '),
    ('delete',               '-d '),
    ('deletesecuritykey',    'deletesecuritykey:'),
    ('deletevd',             'deletevd:'),
    ('dhcp',                 '-d '),
    ('dhcp6',                '-d6 '),
    ('discardcache',         'discardcache:'),
    ('disconnectimage',      '-d '),
    ('diskcachepolicy',      '-dcp '),
    ('displaybios',          '-b '),
    ('displaycommon',        '-c '),
    ('displaycpld',          '-c '),
    ('displayidrac',         '-d '),
    ('displayidsdm',         '-i '),
    ('displayipv4',          '-4 '),
    ('displayipv6',          '-6 '),
    ('displaynumber',        '-d '),
    ('displayonlyraw',       '-R '),
    ('displayraw',           '-E '),
    ('displaytotal',         '-i '),
    ('dom',                  '-dom '),
    ('dow',                  '-dow '),
    ('downloadlocation',     '-d '),
    ('dstpd',                '-dstpd '),
    ('enable6',              '-o '),
    ('encryptvd',            'encryptvd:'),
    ('entitlementid',        '-e '),
    ('expirationtime',       '-e '),
    ('fqdds',                '-c '),
    ('fqdd',                 '-fqdd '),
    ('filename',             '-f '),
    ('filter',               '-f '),
    ('force',                '-f '),
    ('forceoffline',         'forceoffline:'),
    ('forceonline',          'forceonline:'),
    ('forcereset',           '-f '),
    ('format',               '-f '),
    ('frequency',            '-s '),
    ('get',                  '-g '),
    ('groupname',            '-g '),
    ('hotspare',             'hotspare:'),
    ('ignoreheaders',        '-A '),
    ('importconfig',         'importconfig:'),
    ('index',                '-i '),
    ('init',                 'init:'),
    ('jobid',                '-i '),
    ('jobindex',             '-i '),
    ('key',                  '-key '),
    ('keysubtype',           '-k '),
    ('keyindex',             '-k '),
    ('keytext',              '-t '),
    ('keytype',              '-t '),
    ('level',                '-level '),
    ('ledstate',             '-l '),
    ('location',             '-l '),
    ('logtype',              '-t '),
    ('mdtype',               '-mdtype '),
    ('messageid',            '-i '),
    ('mode',                 '-m '),
    ('modifysecuritykey',    'modifysecuritykey:'),
    ('module',               '-m '),
    ('name',                 '-name '),
    ('newpasswd',            '-newpasswd '),
    ('newraidlevel',         '-new_rl '),
    ('optimized',            '-o '),
    ('outputfile',           '-f '),
    ('outputtype',           '-t '),
    ('override',             '-o '),
    ('panumber',             '-panumber '),
    ('passphrase',           '-p '),
    ('passwd',               '-passwd '),
    ('password',             '-p '),
    ('patrolread',           'patrolread:'),
    ('pcode',                '-pcode '),
    ('pdkey',                '-pdkey:'),
    ('pending',              '-pending '),
    ('pfname',               '-pfname '),
    ('plname',               '-plname '),
    ('pmailid',              '-pmailid '),
    ('pmnumber',             '-pmnumber '),
    ('powerstate',           '-s '),
    ('preparetoremove',      'preparetoremove'),
    ('propertyname',         '-p '),
    ('proxyhostname',        '-ph '),
    ('proxypassword',        '-pp '),
    ('proxyport',            '-po '),
    ('proxytype',            '-po '),
    ('proxyusername',        '-pu '),
    ('put',                  '-p '),
    ('raidlevel',            '-rl '),
    ('raidlevelmigration',   'raidlevelmigration:'),
    ('readpolicy',           '-rp '),
    ('rebuild',              'rebuild:'),
    ('recordperline',        '-o '),
    ('records',              '-c '),
    ('refkey',               '--refkey '),
    ('rekey',                'rekey:'),
    ('renamevd',             'renamevd:'),
    ('replacephysicaldisk',  'replacephysicaldisk:'),
    ('resetconfig',          'resetconfig:'),
    ('rollback',             '-r '),
    ('sanumber',             '-sanumber '),
    ('sekmindex',            '-i '),
    ('sekmserver1',          '-p '),
    ('sekmserver2',          '-s '),
    ('sessionid',            '-i '),
    ('sessionusername',      '-i '),
    ('setbootvd',            'setbootvd:'),
    ('setencryptionmode',    'setencryptionmode:'),
    ('sfname',               '-sfname '),
    ('shutdowntype',         '-b '),
    ('shareusername',        '-u '),
    ('sharepassword',        '-p '),
    ('sharelocation',        '-l '),
    ('size',                 '-size '),
    ('slname',               '-slname '),
    ('smailid',              '-smailid '),
    ('smnumber',             '-smnumber '),
    ('speed',                '-speed '),
    ('start',                '-s '),
    ('start-date',           '-d '),
    ('start-time',           '-t '),
    ('starttime',            '-s '),
    ('state',                '-state '),
    ('static',               '-s '),
    ('static6',              '-s6 '),
    ('status',               '-s '),
    ('street1',              '-street1 '),
    ('street2',              '-street2 '),
    ('stripesize',           '-ss '),
    ('t10pienable',          '-T10PIEnable '),
    ('tftpserver',           '-a '),
    ('time',                 '-time '),
    ('transactionid',        '-t '),
    ('uid',                  '-uid '),
    ('unblink',              'unblink:'),
    ('unlock',               'unlock:'),
    ('update',               '-u '),
    ('username',             '-u '),
    ('userindex',            '-i '),
    ('vdkey',                '-vdkey:'),
    ('view',                 '-v '),
    ('waittime',             '-w '),
    ('wom',                  '-wom '),
    ('writepolicy',          '-wp '),
    ('zip',                  '-zip')
  ]) 
  if module.params['bmctype'] == None:
    if re.search("_", module._name):
      module.params['bmctype'] = module._name.split("_")[0] 
    else:
      module.params['bmctype'] = module._name

  if re.search(r"true|yes", str(module.params['execute']).lower()):
    module.params['execute'] = True
  else:
    module.params['execute'] = False

  if re.search(r"true|yes", str(module.params['usesshkey']).lower()):
    module.params['usesshkey'] = True
  else:
    module.params['usesshkey'] = False

  if module.params['sshkeyfile'] == None:
    home_dir = os.environ['HOME']
    ssh_key_file = "%s/.ssh/id_%s" % (home_dir, module.params['sshkeytype'])
    if exists(ssh_key_file):
      module.params['sshkeyfile'] = ssh_key_file

  if re.search(r"ssh",module.params['method']):
    if module.params['bmcpassword'] == None:
      module.params['usesshkey'] = True
    else:
      if re.search(r"[A-Z]|[a-z]|[0-9]", module.params['bmcpassword']):
        module.params['usesshkey'] = False
      else:
        module.params['usesshkey'] = True

    if module.params['method'] == "ssh":
      (stdout, stderr, rc, command, subroutine) = get_set_idrac_value(module, switches)

  if len(stdout) == 0 and len(stderr) > 0:
    stdout = stderr

  module.exit_json(
    _name       = module._name,
    changed     = True,
    stdout      = stdout, 
    stderr      = stderr, 
    rc          = rc, 
    command     = command, 
    subroutine  = subroutine,
    meta        = module.params
  )

if __name__ == '__main__':
  main()
