#!/usr/bin/env python

# Name:         bam (BMC Ansible/Automation Module)
# Version:      0.3.9
# Release:      1
# License:      CC-BA (Creative Commons By Attribution)
#               http://creativecommons.org/licenses/by/4.0/legalcode
# Group:        System
# Source:       N/A
# URL:          N/A
# Distribution: UNIX
# Vendor:       Lateral Blast
# Packager:     Richard Spindler <richard@lateralblast.com.au>
# Description:  BMC Ansible/Automation Module

#from ansible.constants import mk_boolean
#from ansible.module_utils.basic import *
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type
from ansible.module_utils.basic import AnsibleModule
import subprocess
import pexpect
import inspect
import ssl
import os
import re
from os.path import exists

DOCUMENTATION = r'''
---
module: bam
version_added: "post 2.8.0"
short_description: Automate BMC command line
dewscription: 
  - Automate BMC configuration
options:
  action:
    description:
      - The action that must be invoked when the event occurs  
  aftertime:
    description:
      - Displays events that have occurred after this time - The time format is yyyy-mm-dd HH:MM:SS
  alertcategory:
    description:
      - Alert Category 
  apply:
    description:
      - Apply action, e.g. reboot
  assign:
    description:
      - Assign object, e.g. hotspare
  auditcategory:
    description:
      - Audit Category 
  beforetime:
    description:
      - Displays events that have occurred before this time - The time format is yyyy-mm-dd HH:MM:SS
  binarymode:
    description:
      - Binary mode
  blink:
    description:
      - Blink LED
  bmccommand;
    description:
      - Command to run on BMC
  bmchostname:
    description:
      - hostname/IP of BMC to connect to
  bmcpassword;
    description:
      - Passwword for BMC
  bmcusername:
    description:
      - Username for BMC
  bmcport:
    description:
      - Port to connect to BMC on, e.g. 80,443,etc
  bmctype:
    description:
      - Set model of BMC, e.g. iDRAC
  bmctype:
    description:
      - Set model of BMC, e.g. iDRAC
  cancelbgi:
    description:
      - Cancel Background Initialisation
  cancelcheck:
    description:
      - Cancel check
  cancelrebuild:
    description:
      - Cancel rebuild
  capacityexpansion:
    description:
      - Capacity expansion
  category:
    description:
      - Category of alert or audit
  ccheck:
    description:
      - Consistency check
  certtype:
    description:
      - Certificate type
  certcheck:
    description:
      - Certificate check 
  city:
    description:
      - City for configuring certs etc
  clearconfig:
    description:
      - Clear config (e.g. RAID)
  closeallsessions:
    description:
      - Close all connected session to a BMC
  comment:
    description:
      - Add comment
  compact:
    description:
      - Compact output format
  company:
    description:
      - Company for configuring certs etc
  complete:
    description:
      - Complete output
  component:
    description:
      - Component or device to perform operation on
  configurations:
    description:
      - Display configurations for device or object
  connect:
    description:
      - Connect image or device
  connectimage:
    description:
      - Connect image or device
  converttononraid:
    description:
      - Connect disk to non RAID
  converttoraid:
    description:
      - Connect disk to RAID
  createsecuritykey:
    description:
      - Create security key for device or object
  createsecuritykey:
    description:
      - Create security key for device or object
  cryptographicerase:
    description:
      - Secure erase
  count:
    description:
      - Number or numbers of events or items to return
  country:
    description:
      - Country for configuring certs etc
  current:
    description:
      - Get current value (not pending value)
  datetime:
    description:
      - Get time in date time format
  delete:
    description:
      - Delete item
  deletesecuritykey:
    description:
      - Delete security key
  deletevd:
    description:
      - Delete virtual disk
  details:
    description:
      - Get details for device or object
  dhcp:
    description:
      - Enable DHCP
  dhcp6:
    description:
      - Enable DHCPv6
  discardcache:
    description:
      - Discard cache
  disconnect:
    description:
      - Disconnect image or device
  disconnectimage:
    description:
      - Disconnect image or device
  displaycommon:
    description:
      - Display common settings
  displaybios:
    description:
      - Display BIOS version
  displaycpld:
    description:
      - Display CPLD version
  displayidsdm:
    description:
      - Display IDSDM version
  displayidrac:
    description:
      - Display iDRAC version
  displayipv4:
    description:
      - Display IPv4 details
  displayipv6:
    description:
      - Display IPv4 details
  displaynumber:
    description:
      - Display number or records or items
  displaynumberofrecords:
    description:
      - Display number or records or items
  displaytotal:
    description:
      - Display total number of items
  diskcachepolicy:
    description:
      - Set disk cache policy
  displayraw:
    description:
      - Display raw
  dom:
    description:
      - Day of Month
  domainname:
    description:
      - Domain Name
  dayofmonth:
    description:
      - Day of Month
  downloadlocation:
    description:
      - Download location
  emms:
    description:
      - EMMs id to perform operation on
  enabled:
    description:
      - Set object to enabled
  enclosures:
    description:
      - Enclosures to perform operation on
  encryptvd:
    description:
      - Encrypt virtual disk
  entitlementid:
    description:
      - Entitlement ID
  execute:
    description:
      - Execute operation
  expirytime:
    description:
      - Expiry time for object or action
  execute:
    description:
      - Whether to execute ansible stanza (useful for debugging)
  filename:
    description:
      - Filename to perform operation on
  filter:
    description:
      - Filter to filter objects by
  filters:
    description:
      - Filters
  fromtime:
    description:
      - From time
  forceoffline:
    description:
      - Force device or object offline
  forceonline:
    description:
      - Force device or object online
  forcereset:
    description:
      - Force reset device or object
  format:
    description:
      - Specify format to use
  fqdd:
    description:
      - Fully Qualified Descriptor to operate on
  function:
    description:
      - Action to perform (e.g. get/set)
  generate:
    description:
      - Generate object
  get:
    description:
      - Get object
  group:
    description:
      - Group name
  groupname:
    description:
      - Group name
  hotspare:
    description:
      - Hotspare device
  id:
    description:
      - Item, object or device ID
  ignoreheaders:
    description:
      - Ignore headers
  importconfig:
    description:
      - Import device RAID config
  index:
    description:
      - Index ID
  init:
    description:
      - Init object or device
  interval:
    description:
      - Time interval for operation
  jobid:
    description:
      - Job ID
  jobindex:
    description:
      - Job Index
  key:
    description:
      - Key number or id for object
  keyindex:
    description:
      - Key number in iDRAC key index
  keysubtype:
    description:
      - Key subtype
  keytext:
    description:
      - Key text
  keytype:
    description:
      - Key type
  ledstate:
    description:
      - LED state
  level:
    description:
      - Set level
  location:
    description:
      - Location of device or object
  logtype:
    description:
      - Log type e.g. xml
  mdtype:
    description:
      - MD type 
  messageid:
    description:
      - Message ID
  method:
    description:
      - Method
  method:
    description:
      - Method to use to set value, e.g. SSH, or racadm
  mode:
    description:
      - Mode
  modifysecuritykey:
    description:
      - Modify security key for device or object
  module:
    description:
      - Module
  name:
    description:
      - Name of object 
  newpasswd:
    description:
      - New password
  newraidlevel:
    description:
      - New RAID level
  nocertwarn:
    description:
      - Disable certificate warnings when performing operations
  nopreserve:
    description:
      - Do not preserve configuration or/of object
  notifications:
    description:
      - Notifications
  object:
    description:
      - Parameter/object to be set , e.g. cfgIpmiLanEnable
  objectname:
    description:
      - Parameter/object to be set , e.g. cfgIpmiLanEnable
  objectgroup:
    description:
      - Component that is to have it's object set, e.g. cfgIpmi - Used with older versions of racadm
  optimized:
    description:
      - Set to optimized
  options:
    description:
      - Additional options to add to command line
  outputfile:
    description:
      - Output file
  outputtype:
    description:
      - Output type (e.g. XML)
  override:
    description:
      - Override existing object or value
  passphrase:
    description:
      - Passphrase
  passwd:
    description:
      - Password
  password:
    description:
      - Password
  path:
    description:
      - Path of object or device
  patrolread:
    description:
      - Patrol read on object or device
  pdisks:
    description:
      - Physical disks
  pdkey:
    description:
      - Physical disk key or ID
  pending:
    description:
      - Set to pending
  power:
    description:
      - Power state (used with some iDRAC commands)
  powerstate:
    description:
      - Power state (used with some iDRAC commands)
  preparetoremove:
    description:
      - Prepare device for removal
  primarydns:
    description:
      - Primary DNS
  propertyname:
    description:
      - Property name
  proxy:
    description:
      - Proxy
  proxyhost:
    description:
      - Proxy host
  proxyhostname:
    description:
      - Proxy hostname
  proxypassword:
    description:
      - Proxy password
  proxyport:
    description:
      - Proxy port
  proxytype:
    description:
      - Proxy type
  proxyuser:
    description:
      - Proxy user
  proxyusername:
    description:
      - Proxy user
  queue:
    description:
      - Queue
  raidlevel:
    description:
      - RAID level
  raidlevelmigration:
    description:
      - RAID level migration
  readpolicy:
    description:
      - Read policy on device
  realtime:
    description:
      - Real time option for job queues
  reboottype:
    description:
      - Reboot type
  rebuild:
    description:
      - Rebuid device
  recordperline:
    description:
      - Record per line
  records:
    description:
      - Records
  recurrence:
    description:
      - Recurrence time
  refkey:
    description:
      - Specifies the controller or enclosure FQDDs
  renamevd:
    description:
      - Rename virtual disk
  repeats:
    description:
      - Repeat parameter
  replacephysicaldisk:
    description:
      - Replace physical disk
  resetconfig:
    description:
      - Reset config of device
  rollback:
    description:
      - Rollback
  sharelocation:
    description:
      - Share location
  sharepassword:
    description:
      - Share password
  shareusername:
    description:
      - Share username 
  shutdowntype:
    description:
      - Shutdown type (used with some iDRAC commands)
  sshkeyfile:
    description:
      - SSH keyfile 
  sshkeytext:
    description:
      - SSH key test 
  sshkeytype:
    description:
      - SSH key type
  start:
    description:
      - Start
  start-date:
    description:
      - Start date
  start-record:
    description:
      - Start record
  start-time:
    description:
      - Start time for operations
  starttime:
    description:
      - Start time for operations
  static:
    description:
      - Static IPv4 address
  static6:
    description:
      - Static IPv6 address
  status:
    description:
      - Status
  street1:
    description:
      - Street informations
  street2:
    description:
      - Street informations
  stripesize:
    description:
      - Stripe size
  subcategory:
    description:
      - Subcategory
  t10pienable:
    description:
      - Creates a virtual disk with protection information
  tftpserver:
    description:
      - TFTP Server
  time:
    description:
      - Time
  transactionid:
    description:
      - Transaction ID
  type:
    description:
      - Type
  uid:
    description:
      - User ID
  update:
    description:
      - Update value/object
  user:
    description:
      - User
  userindex:
    description:
      - User index number
  username:
    description:
      - User
  usesshkey:
    description:
      - Use SSH key 
  value:
    description:
      - Used with set object function, e.g. Enabled
  vdkey:
    description:
      - Virtual Disk id
  verbose:
    description:
      - Enable/disable verbose output
  waittime:
    description:
      - Wait time before executing command (used with some iDRAC commands)
  writepolicy:
    description:
      - Write policy for RAID devices  
  wom:
    description:
      - Week of month
  weekofmonth:
    description:
      - Week of month
'''

EXAMPLES = r'''
#  Enabling IPMI over LAN
- name: Enable IPMI over LAN via racadm using old method
  bam:
    bmctype:      idrac
    method:       racadm
    bmchostname:  idrac001.net
    bmcusername:  root
    bmcpassword:  calvin
    function:     set
    objectgroup:  cfgIpmiLan
    object:       cfgIpmiLanEnable
    value:        1
- name: Enable IPMI over LAN via racadm using new method
  bam:
    bmctype:      idrac
    method:       racadm
    bmxhostname:  idrac001.net
    bmcusername:  root
    bmcpassword:  calvin
    function:     set
    object:       iDRAC.IPMILan.Enable
    value:        Enabled
'''

# Initiate SSH Session

def start_ssh_session(module):
  if module.params['usesshkey'] == True:
    ssh_command = "ssh -o StrictHostKeyChecking=no -i %s %s@%s" % (module.params['sshkeyfile'], module.params['bmcusername'], module.params['bmchostname'])
    ssh_session = pexpect.spawn(ssh_command)
  else:
    ssh_command = "ssh -o StrictHostKeyChecking=no"
    ssh_command = "%s %s@%s" % (ssh_command, module.params['bmcusername'], module.params['bmchostname'])
    ssh_session = pexpect.spawn(ssh_command)
    ssh_session.expect("assword: ")
    ssh_session.sendline(module.params['bmcpassword'])
  return(ssh_session, ssh_command)

# Parse simplified group tags

def parse_group(module):
  if re.search(r"lan|network",module.params['objectgroup']):
    if re.search(r"ipmi",module.params['objectgroup']):
      module.params['objectgroup'] = "cfgIpmiLan"
    else:
      module.params['objectgroup'] = "cfgLanNetworking"
  if re.search(r"server",module.params['objectgroup']):
    module.params['objectgroup'] = "cfgServerInfo"
  if re.search(r"serial",module.params['objectgroup']):
    if re.search(r"ipmi",module.params['objectgroup']):
      module.params['objectgroup'] = "cfgIpmiSerial"
    else:
      module.params['objectgroup'] = "cfgSerial"
  return(module)

# Initiate web client

def start_web_session():
  from selenium import webdriver
  from selenium.webdriver.firefox.options import Options
  options = Options()
  options.headless = True
  web_session = webdriver.Firefox(options=options)
  return web_session

# Set AMT value

def set_amt_value(module):
  subroutine = inspect.stack()[0][3]
  import lxml
  from bs4 import BeautifulSoup
  result = ""
  base_url = "%s://%s:%s@%s:%s" % (module.params['method'], module.params['bmcusername'], module.params['bmcpassword'], module.params['bmchostname'], module.params['bmcport'])
  web_session = start_web_session()
  if not module.params['hostname'] == None or not module.params['domainname'] == None:
    full_url = "%s/fqdn.htm" % (base_url)
    if not module.params['hostname'] == None:
      search = "HostName"
      web_session.get(full_url)
      from selenium.webdriver.common.by import By
      field = web_session.find_element_by_name(search)
      field.clear()
      field.send_keys(module.params['hostname'])
      web_session.find_element_by_xpath('//input[@value="   Submit   "]').click()
    if not module.params['domainname'] == None:
      search = "DomainName"
      web_session.get(full_url)
      from selenium.webdriver.common.by import By
      field = web_session.find_element_by_name(search)
      field.clear()
      field.send_keys(module.params['domainname'])
      web_session.find_element_by_xpath('//input[@value="   Submit   "]').click()
  if not module.params['primarydns'] == None or not module.params['secondarydns'] == None:
    full_url = "%s/ip.htm" % (base_url)
    if not module.params['primarydns'] == None:
      search = "DNSServer"
      web_session.get(full_url)
      from selenium.webdriver.common.by import By
      field = web_session.find_element_by_name(search)
      field.clear()
      field.send_keys(module.params['primarydns'])
      web_session.find_element_by_xpath('//input[@value="   Submit   "]').click()
    if not module.params['secondarydns'] == None:
      search = "AlternativeDns"
      web_session.get(full_url)
      from selenium.webdriver.common.by import By
      field = web_session.find_element_by_name(search)
      field.clear()
      field.send_keys(module.params['secondarydns'])
      web_session.find_element_by_xpath('//input[@value="   Submit   "]').click()
  if not module.params['power'] == None:
    full_url = "%s/remote.htm" % (base_url)
    if re.search(r"off", module.params['power']):
      web_session.find_element_by_xpath('//input[@value="1"]').click()
    if re.search(r"cycle", module.params['power']):
      web_session.find_element_by_xpath('//input[@value="3"]').click()
    if re.search(r"reset", module.params['power']):
      web_session.find_element_by_xpath('//input[@value="4"]').click()
    web_session.get(full_url)
    from selenium.webdriver.common.by import By
    web_session.find_element_by_xpath('//input[@value="Send Command"]').click()
    time.sleep(2)
    object = web_session.switch_to.alert
    time.sleep(2)
    object.accept()
  web_session.quit()
  return(result, "", 0, full_url, subroutine)


# Get AMT value

def get_amt_value(module):
  subroutine = inspect.stack()[0][3]
  import lxml
  from bs4 import BeautifulSoup
  result = ""
  if module.params['objectgroup'] == "bios":
    module.params['objectgroup'] = "system"
    module.params['object'] = "bios"
  if module.params['objectgroup'] == "model":
    module.params['objectgroup'] = "system"
    module.params['object'] = "model"
  if module.params['objectgroup'] == "serial":
    module.params['objectgroup'] = "system"
    module.params['object'] = "serial"
  base_url = "%s://%s:%s@%s:%s" % (module.params['method'], module.params['bmcusername'], module.params['bmcpassword'], module.params['bmchostname'], module.params['bmcport'])
  full_url = "%s/index.htm" % (base_url)
  if re.search("model|version|serial|release|system", module.params['objectgroup']):
    full_url = "%s/hw-sys.htm" % (base_url)
  if re.search("disk", module.params['objectgroup']):
    full_url = "%s/hw-disk.htm" % (base_url)
  if re.search("network", module.params['objectgroup']):
    full_url = "%s/ip.htm" % (base_url)
  if re.search("memory", module.params['objectgroup']):
    full_url = "%s/hw-mem.htm" % (base_url)
  if re.search(r"events|fqdn", module.params['objectgroup']):
    full_url = "%s/%s.htm" % (base_url, module.params['objectgroup'])
  if re.search("remote|power", module.params['objectgroup']):
    full_url  = "%s/remote.htm" % (base_url)
    module.params['objectgroup'] = re.sub("power", "state", module.params['objectgroup'])
  if re.search("processor|cpu|socket|family|manufacturer|speed", module.params['objectgroup']):
    full_url  = "%s/hw-proc.htm" % (base_url)
    module.params['objectgroup'] = re.sub("cpu", "version", module.params['objectgroup'])
  web_session = start_web_session()
  web_session.get(full_url)
  html_doc  = web_session.page_source
  html_doc  = BeautifulSoup(html_doc, features='lxml')
  html_data = html_doc.find_all('td', 'maincell')
  if re.search(r"state", module.params['objectgroup']):
    html_data = str(html_data).split("<td>")
  else:
    html_data = str(html_data).split("<tr>")
  new_data = []
  for html_line in html_data:
    temp_data = html_line.split("\n")
    for temp_line in temp_data:
      if not re.search("hidden", temp_line):
        new_data.append(temp_line)
  html_data = new_data
  results   = []
  if re.search("processor|system|memory|disk|event|fqdn|network", module.params['objectgroup']):
    temp_data = []
    counter   = 0
    for html_line in html_data:
      html_text  = str(html_line)
      if not re.search(r"hidden|onclick|colspan", html_text):
        html_text  = re.sub(r"^\<\/td\>", "", html_text)
        html_text  = re.sub(r"\<br\/\>", ",", html_text)
        plain_text = BeautifulSoup(html_text, features='lxml').get_text()
        plain_text = re.sub(r"\s+", " ", plain_text)
        plain_text = re.sub(r"^ | $", "", plain_text)
        if re.search("event", module.params['objectgroup']):
          if re.search("border=", html_text):
            if counter == 5:
              temp_data.append(plain_text)
            else:
              temp_text = (",").join(temp_data)
              if re.search(r"[A-Z]|[a-z]|[0-9]", plain_text):
                results.append(temp_text)
                temp_data = []
              temp_data.append(plain_text)
          else:
            if re.search(r"[A-Z]|[a-z]|[0-9]", plain_text):
              temp_data.append(plain_text)
        else:
          if re.search(r"\<\/h1\>|\<\/h2\>", html_text):
            results.append(plain_text)
          else:
            if re.search(r"\<\/p\>", html_text):
              if re.search("checkbox", html_text):
                param = plain_text
                if re.search("checked", html_text):
                  value = "Yes"
                else:
                  value = "No"
              else:
                param = plain_text
                html  = html_data[counter+1]
                html  = str(html)
                html  = re.sub(r"^\<\/td\>", "", html)
                text  = BeautifulSoup(html, features='lxml').get_text()
                if re.search("value=", html) and not re.search(r"[A-Z]|[a-z]|[0-9]", text):
                  value = html.split('"')[-2]
                else:
                  value = text
                if not re.search(r"[A-Z]|[a-z]|[0-9]", value):
                  html = html_data[counter+2]
                  html = str(html)
                  html = re.sub(r"^\<\/td\>", "", html)
                  text = BeautifulSoup(html, features='lxml').get_text()
                  if re.search("value=", html) and not re.search(r"[A-Z]|[a-z]|[0-9]", text):
                    value = html.split('"')[-2]
                  else:
                    value = text
              plain_text = "%s: %s" % (param, value)
              plain_text = re.sub("::", ":", plain_text)
              plain_text = re.sub(r"\s+$", "", plain_text)
              plain_text = re.sub(r":$", "", plain_text)
              if re.search(r"[A-Z]|[a-z]|[0-9]", plain_text):
                results.append(plain_text)
      counter = counter+1
  if re.search("processor|system|memory|disk|event|fqdn|network", module.params['objectgroup']):
    found = False
    for result in results:
      if re.search(r"[a-z]", module.params['object']):
        if re.search(module.params['object'], result.lower()):
          found = True
        if not module.params['search'] == None:
          if re.search(module.params['search'], result) and found == True:
            if re.search(r":", result):
              result = result.split(": ")[1]
            return(result, "", 0, full_url, subroutine)
        else:
          if re.search(module.params['object'], result.lower()):
            if re.search(r":", result):
              result = result.split(": ")[1]
            return(result, "", 0, full_url, subroutine)
      else:
        if re.search(r"[A-Z]|[a-z]|[0-9]", search):
          if re.search(search, result):
            return(result, "", 0, full_url, subroutine)
        else:
          return(result, "", 0, full_url, subroutine)
  web_session.quit()
  return(result, "", 0, full_url, subroutine)

# Get value from line

def get_value_from_line(line):
  value = line
  if re.search(r"=", line):
    value = str(line)
    value = line.split("=")[1]
    value = re.sub(r"^\s+", "", value)
    value = re.sub(r"\s+$", "", value)
  return value

# Set/get iDRAC value 

def get_set_idrac_value(module, switches):
  subroutine = inspect.stack()[0][3]
  if module.params['function'] == "execute":
    command = module.params['bmccommand']
  else:
    command = module.params['function']
    if module.params['function'] == "config" or module.params['function'] == "getconfig":
      module = parse_group(module)
      if module.params['function'] == "config":
        command = "config -g %s -o %s %s" % (module.params['objectgroup'], module.params['object'], module.params['value'])
      else:
        command = "getconfig -g %s -o %s" % (module.params['objectgroup'], module.params['object'])
    else:
      if not module.params['subfunction'] == None:
        command = "%s %s" % (command, module.params['subfunction'])
      if not module.params['action'] == None:
        command = "%s %s" % (command, module.params['action'])
      if not module.params['object'] == None:
        command = "%s %s" % (command, module.params['object'])
      if not module.params['queue'] == None:
        command = "%s %s" % (command, module.params['queue'])
      for key, value in switches.items():
        if not module.params[key] == None:
          if re.search(r"^true$|^yes$", str(module.params[key]).lower()) or module.params[key] == True:
            command = "%s %s" % (command, value)
          else:
            if not re.search(r"^false$|^no$", str(module.params[key]).lower()) and not module.params[key] == False:
              command = "%s %s%s" % (command, value, module.params[key])
  value = ""
  if not module.params['value'] == None:
    if not module.params['function'] == "config" and not module.params['function'] == "getconfig":
      command = "%s %s" % (command, module.params['value'])
  if not module.params['options'] == None:
    command = "%s %s" % (command, module.params['options'])
  if module.params['execute'] == True:
    if not module.params['function'] == "execute":
      if not module.params['method'] == "racadm":
        command = "racadm %s" % (command)
    if module.params['method'] == "ssh":
      (ssh_session, ssh_command) = start_ssh_session(module)
      ssh_session.expect("/admin1-> ")
      ssh_session.sendline(command)
      ssh_session.expect("/admin1-> ")
      output = ssh_session.before
      output = output.decode()
      output = output.replace("\r", "")
      full_command = "%s '%s'" % (ssh_command, command)
      if re.search(r"RAC1168", str(output)):
        output = output.split("\n")
        output = output[0:-7]
        output = "\n".join(output)
      if not module.params['search'] == None:
        regex = r"\b(?=\w)" + re.escape(module.params['search']) + r"\b(?!\w)"
        for line in output.split("\n"):
          if re.search(regex, line, re.IGNORECASE):
            value = get_value_from_line(line)
            return(line, "", 0, full_command, value, subroutine)
      if not module.params['searchforvalue'] == None:
        regex = r"\b(?=\w)" + re.escape(module.params['searchforvalue']) + r"\b(?!\w)"
        for line in output.split("\n"):
          if re.search(regex, line, re.IGNORECASE):
            if re.search(r"=", line):
              value = get_value_from_line(line)
            return(value, "", 0, full_command, value, subroutine)
      return(output, "", 0, full_command, value, subroutine)
    else:
      if module.params['nocertwarn'] == True:
        rac_command = "racadm --nocertwarn"
      else:
        if module.params['certcheck'] == True:
          rac_command = "racadm -S"
        else:
          rac_command = "racadm"
      command = "%s -r %s -u %s -p %s %s" % (rac_command, module.params['bmchostname'], module.params['bmcusername'], module.params['bmcpassword'], command)
      process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
      output  = process.stdout
      if not module.params['search'] == None:
        regex = r"\b(?=\w)" + re.escape(module.params['search']) + r"\b(?!\w)"
        for line in output.split("\n"):
          if re.search(regex, line, re.IGNORECASE):
            value = get_value_from_line(line)
            return(line, "", 0, command, value, subroutine)
      if not module.params['searchforvalue'] == None:
        regex = r"\b(?=\w)" + re.escape(module.params['searchforvalue']) + r"\b(?!\w)"
        for line in output.split("\n"):
          if re.search(regex, line, re.IGNORECASE):
            if re.search(r"=", line):
              value = get_value_from_line(line)
            return(value, "", 0, command, value, subroutine)
      lines = output.split("\n")
      if len(output) > 0:
        output = []
        for line in lines:
          if len(line) > 0:
            if re.search(r"[a-z]|[A-Z]|[0-9]", line):
              output.append(line)
        output = "\n".join(output)
      return(output, process.stderr, process.returncode, value, command, subroutine)
  else:
    if module.params['method'] == "racadm":
      if module.params['nocertwarn'] == True:
        rac_command = "racadm --nocertwarn"
      else:
        if module.params['certcheck'] == True:
          rac_command = "racadm -S"
        else:
          rac_command = "racadm"
      command = "%s -r %s -u %s -p %s %s" % (rac_command, module.params['bmchostname'], module.params['bmcusername'], module.params['bmcpassword'], command)
    return("", "", 0, command, value, subroutine)
  return

# Main routine - Get anisible module objects, call functions and exit

def main():
  fields = {
    'action':                   { 'default':  None,    'type': 'str' },
    'aftertime':                { 'default':  None,    'type': 'str' },
    'alertcategory':            { 'default':  None,    'type': 'str' },
    'all':                      { 'default':  False,   'type': 'bool' },
    'apply':                    { 'default':  None,    'type': 'str' },
    'applyreboot':              { 'default':  None,    'type': 'str' },
    'auditcategory':            { 'default':  None,    'type': 'str' },
    'assign':                   { 'default':  None,    'type': 'str' },
    'backuppassphrase':         { 'default':  None,    'type': 'str' },
    'beforetime':               { 'default':  None,    'type': 'str' },
    'binarymode':               { 'default':  False,   'type': 'bool' },
    'blink':                    { 'default':  None,    'type': 'str' },
    'bmccommand':               { 'default':  None,    'type': 'str' },
    'bmchostname':              { 'default':  None,    'type': 'str' },
    'bmcpassword':              { 'default':  None,    'type': 'str' },
    'bmcport':                  { 'default': "443",    'type': 'str' },
    'bmcusername':              { 'default':  None,    'type': 'str' },
    'bmctype':                  { 'default':  None,    'type': 'str' },
    'cancelbgi':                { 'default':  None,    'type': 'str' },
    'cancelcheck':              { 'default':  None,    'type': 'str' },
    'cancelrebuild':            { 'default':  None,    'type': 'str' },
    'capacityexpansion':        { 'default':  None,    'type': 'str' },
    'category':                 { 'default':  None,    'type': 'str' },
    'ccheck':                   { 'default':  None,    'type': 'str' },
    'certcheck':                { 'default':  False,   'type': 'bool' },
    'certtype':                 { 'default':  None,    'type': 'str' },
    'city':                     { 'default':  None,    'type': 'str' },
    'clearconfig':              { 'default':  None,    'type': 'str' },
    'clone':                    { 'default':  False,   'type': 'bool' },
    'closeallsessions':         { 'default':  False,   'type': 'bool' },
    'comment':                  { 'default':  None,    'type': 'str' },
    'compact':                  { 'default':  False,   'type': 'bool' },
    'company':                  { 'default':  None,    'type': 'str' },
    'complete':                 { 'default':  False,   'type': 'bool' },
    'component':                { 'default':  None,    'type': 'str' },
    'configurations':           { 'default':  None,    'type': 'str' },
    'configpassphrase':         { 'default':  None,    'type': 'str' },
    'connect':                  { 'default':  False,   'type': 'bool' },
    'connectimage':             { 'default':  False,   'type': 'bool' },
    'converttononraid':         { 'default':  None,    'type': 'str' },
    'converttoraid':            { 'default':  None,    'type': 'str' },
    'count':                    { 'default':  None,    'type': 'str' },
    'country':                  { 'default':  None,    'type': 'str' },
    'createsecuritykey':        { 'default':  None,    'type': 'str' },
    'createvd':                 { 'default':  None,    'type': 'str' },
    'cryptographicerase':       { 'default':  None,    'type': 'str' },
    'current':                  { 'default':  False,   'type': 'bool' },
    'datetime':                 { 'default':  False,   'type': 'bool' },
    'dayofmonth':               { 'default':  None,    'type': 'str' },
    'dayofweek':                { 'default':  None,    'type': 'str' },
    'delete':                   { 'default':  False,   'type': 'bool' },
    'deletesecuritykey':        { 'default':  None,    'type': 'str' },
    'deletevd':                 { 'default':  None,    'type': 'str' },
    'details':                  { 'default':  False,   'type': 'bool' },
    'dhcp':                     { 'default':  False,   'type': 'bool' },
    'dhcp6':                    { 'default':  False,   'type': 'bool' },
    'discardcache':             { 'default':  None,    'type': 'str' },
    'disconnect':               { 'default':  False,   'type': 'bool' },
    'disconnectimage':          { 'default':  False,   'type': 'bool' },
    'displaycommon':            { 'default':  False,   'type': 'bool' },
    'displaybios':              { 'default':  False,   'type': 'bool' },
    'displaycpld':              { 'default':  False,   'type': 'bool' },
    'displayidsdm':             { 'default':  False,   'type': 'bool' },
    'displayidrac':             { 'default':  False,   'type': 'bool' },
    'displayipv4':              { 'default':  False,   'type': 'bool' },
    'displayipv6':              { 'default':  False,   'type': 'bool' },
    'displaynumber':            { 'default':  False,   'type': 'bool' },
    'displaynumberofrecords':   { 'default':  False,   'type': 'bool' },
    'displayonlyraw':           { 'default':  False,   'type': 'bool' },
    'displaytotal':             { 'default':  False,   'type': 'bool' },
    'diskcachepolicy':          { 'default':  None,    'type': 'str' },
    'displayraw':               { 'default':  False,   'type': 'bool' },
    'dom':                      { 'default':  None,    'type': 'str' },
    'domainname':               { 'default':  None,    'type': 'str' },
    'dow':                      { 'default':  None,    'type': 'str' },
    'downloadlocation':         { 'default':  None,    'type': 'str' },
    'dstpd':                    { 'default':  None,    'type': 'str' },
    'emms':                     { 'default':  None,    'type': 'str' },
    'enable6':                  { 'default':  False,   'type': 'bool' },
    'enclosures':               { 'default':  None,    'type': 'str' },
    'encryptvd':                { 'default':  None,    'type': 'str' },
    'entitlementid':            { 'default':  None,    'type': 'str' },
    'execute':                  { 'default':  True,    'type': 'bool' },
    'expirationtime':           { 'default':  None,    'type': 'str' },
    'file':                     { 'default':  None,    'type': 'str' },
    'filename':                 { 'default':  None,    'type': 'str' },
    'filter':                   { 'default':  None,    'type': 'str' },
    'filters':                  { 'default':  None,    'type': 'str' },
    'force':                    { 'default':  False,   'type': 'bool' },
    'forceoffline':             { 'default':  None,    'type': 'str' },
    'forceonline':              { 'default':  None,    'type': 'str' },
    'forcereset':               { 'default':  False,   'type': 'bool' },
    'format':                   { 'default':  None,    'type': 'str' },
    'fqdd':                     { 'default':  None,    'type': 'str' },
    'fqdds':                    { 'default':  False,   'type': 'bool' },
    'frequency':                { 'default':  None,    'type': 'str' },
    'fromtime':                 { 'default':  None,    'type': 'str' },
    'ftpserver':                { 'default':  None,    'type': 'str' },
    'function':                 { 'default':  None,    'type': 'str' },
    'generate':                 { 'default':  False,   'type': 'bool' },
    'get':                      { 'default':  False,   'type': 'bool' },
    'group':                    { 'default':  None,    'type': 'str' },
    'groupname':                { 'default':  None,    'type': 'str' },
    'hotspare':                 { 'default':  None,    'type': 'str' },
    'id':                       { 'default':  None,    'type': 'str' },
    'ignoreheaders':            { 'default':  False,   'type': 'bool' },
    'importconfig':             { 'default':  None,    'type': 'str' },
    'index':                    { 'default':  None,    'type': 'str' },
    'init':                     { 'default':  None,    'type': 'str' },
    'interval':                 { 'default':  None,    'type': 'str' },
    'jobid':                    { 'default':  None,    'type': 'str' },
    'jobindex':                 { 'default':  None,    'type': 'str' },
    'key':                      { 'default':  None,    'type': 'str' },
    'keyindex':                 { 'default':  None,    'type': 'str' },
    'keysubtype':               { 'default':  None,    'type': 'str' },
    'keytext':                  { 'default':  None,    'type': 'str' },
    'keytype':                  { 'default':  None,    'type': 'str' },
    'ledstate':                 { 'default':  None,    'type': 'str' },
    'level':                    { 'default':  None,    'type': 'str' },
    'location':                 { 'default':  None,    'type': 'str' },
    'logtype':                  { 'default':  None,    'type': 'str' },
    'mdtype':                   { 'default':  None,    'type': 'str' },
    'messageid':                { 'default':  None,    'type': 'str' },
    'method':                   { 'default': 'ssh',    'type': 'str' },
    'mode':                     { 'default':  None,    'type': 'str' },
    'modifysecuritykey':        { 'default':  None,    'type': 'str' },
    'module':                   { 'default':  None,    'type': 'str' },
    'name':                     { 'default':  None,    'type': 'str' },
    'newpasswd':                { 'default':  None,    'type': 'str' },
    'newraidlevel':             { 'default':  None,    'type': 'str' },
    'nocertwarn':               { 'default':  True,    'type': 'bool' },
    'nopreserve':               { 'default':  False,   'type': 'bool' },
    'notifications':            { 'default':  None,    'type': 'str' },
    'object':                   { 'default':  None,    'type': 'str' },
    'objectname':               { 'default':  None,    'type': 'str' },
    'objectgroup':              { 'default':  None,    'type': 'str' },
    'optimized':                { 'default':  False,   'type': 'bool' },
    'options':                  { 'default':  None,    'type': 'str' },
    'outputfile':               { 'default':  None,    'type': 'str' },
    'outputtype':               { 'default':  None,    'type': 'str' },
    'override':                 { 'default':  False,   'type': 'bool' },
    'panumber':                 { 'default':  None,    'type': 'str' },
    'passphrase':               { 'default':  None,    'type': 'str' },
    'passwd':                   { 'default':  None,    'type': 'str' },
    'password':                 { 'default':  None,    'type': 'str' },
    'path':                     { 'default':  None,    'type': 'str' },
    'patrolread':               { 'default':  None,    'type': 'str' },
    'pcode':                    { 'default':  None,    'type': 'str' },
    'pdisks':                   { 'default':  None,    'type': 'str' },
    'pdkey':                    { 'default':  None,    'type': 'str' },
    'pending':                  { 'default':  False,   'type': 'bool' },
    'pfname':                   { 'default':  None,    'type': 'str' },
    'plname':                   { 'default':  None,    'type': 'str' },
    'pmailid':                  { 'default':  None,    'type': 'str' },
    'pmnumber':                 { 'default':  None,    'type': 'str' },
    'power':                    { 'default':  None,    'type': 'str' },
    'powerstate':               { 'default':  None,    'type': 'str' },
    'primarydns':               { 'default':  None,    'type': 'str' },
    'preparetoremove':          { 'default':  None,    'type': 'str' },
    'propertyname':             { 'default':  None,    'type': 'str' },
    'proxy':                    { 'default':  False,   'type': 'bool' },
    'proxyhost':                { 'default':  None,    'type': 'str' },
    'proxyhostname':            { 'default':  None,    'type': 'str' },
    'proxypassword':            { 'default':  None,    'type': 'str' },
    'proxyport':                { 'default':  None,    'type': 'str' },
    'proxytype':                { 'default':  None,    'type': 'str' },
    'proxyuser':                { 'default':  None,    'type': 'str' },
    'proxyusername':            { 'default':  None,    'type': 'str' },
    'put':                      { 'default':  False,   'type': 'bool' },
    'queue':                    { 'default':  None,    'type': 'str' },
    'raidlevel':                { 'default':  None,    'type': 'str' },
    'raidlevelmigration':       { 'default':  False,   'type': 'bool' },
    'readpolicy':               { 'default':  None,    'type': 'str' },
    'realtime':                 { 'default':  False,   'type': 'bool' },
    'reboottype':               { 'default':  None,    'type': 'str' },
    'rebuild':                  { 'default':  None,    'type': 'str' },
    'recordperline':            { 'default':  False,   'type': 'bool' },
    'records':                  { 'default':  None,    'type': 'str' },
    'recurrence':               { 'default':  None,    'type': 'str' },
    'refkey':                   { 'default':  None,    'type': 'str' },
    'rekey':                    { 'default':  None,    'type': 'str' },
    'renamevd':                 { 'default':  None,    'type': 'str' },
    'repeat':                   { 'default':  None,    'type': 'str' },
    'replacephysicaldisk':      { 'default':  None,    'type': 'str' },
    'resetconfig':              { 'default':  None,    'type': 'str' },
    'rollback':                 { 'default':  False,   'type': 'bool' },
    'sanumber':                 { 'default':  None,    'type': 'str' },
    'secureerase':              { 'default':  None,    'type': 'str' },
    'search':                   { 'default':  None,    'type': 'str' },
    'searchforvalue':           { 'default':  None,    'type': 'str' },
    'secondarydns':             { 'default':  None,    'type': 'str' },
    'sekmindex':                { 'default':  None,    'type': 'str' },
    'sekmserver1':              { 'default':  None,    'type': 'str' },
    'sekmserver2':              { 'default':  None,    'type': 'str' },
    'sequencenumber':           { 'default':  None,    'type': 'str' },
    'sessionid':                { 'default':  None,    'type': 'str' },
    'sessionusername':          { 'default':  None,    'type': 'str' },
    'setbootvd':                { 'default':  None,    'type': 'str' },
    'setencryptionmode':        { 'default':  None,    'type': 'str' },
    'severity':                 { 'default':  None,    'type': 'str' },
    'sfname':                   { 'default':  None,    'type': 'str' },
    'sharelocation':            { 'default':  None,    'type': 'str' },
    'sharepassword':            { 'default':  None,    'type': 'str' },
    'shareusername':            { 'default':  None,    'type': 'str' },
    'shutdowntype':             { 'default':  None,    'type': 'str' },
    'size':                     { 'default':  None,    'type': 'str' },
    'slname':                   { 'default':  None,    'type': 'str' },
    'smailid':                  { 'default':  None,    'type': 'str' },
    'smnumber':                 { 'default':  None,    'type': 'str' },
    'speed':                    { 'default':  None,    'type': 'str' },
    'sshkeyfile':               { 'default':  None,    'type': 'str' },
    'sshkeytext':               { 'default':  None,    'type': 'str' },
    'sshkeytype':               { 'default': 'rsa',    'type': 'str' },
    'start':                    { 'default':  None,    'type': 'str' },
    'start-date':               { 'default':  None,    'type': 'str' },
    'start-record':             { 'default':  None,    'type': 'str' },
    'start-time':               { 'default':  None,    'type': 'str' },
    'starttime':                { 'default':  None,    'type': 'str' },
    'state':                    { 'default':  None,    'type': 'str' },
    'static':                   { 'default':  False,   'type': 'bool' },
    'static6':                  { 'default':  False,   'type': 'bool' },
    'status':                   { 'default':  False,   'type': 'bool' },
    'street1':                  { 'default':  None,    'type': 'str' },
    'street2':                  { 'default':  None,    'type': 'str' },
    'stripesize':               { 'default':  None,    'type': 'str' },
    'subcategory':              { 'default':  None,    'type': 'str' },
    'subfunction':              { 'default':  None,    'type': 'str' },
    't10pienable':              { 'default':  False,   'type': 'bool' },
    'tftpserver':               { 'default':  None,    'type': 'str' },
    'transactionid':            { 'default':  None,    'type': 'str' },
    'time':                     { 'default':  None,    'type': 'str' },
    'type':                     { 'default':  None,    'type': 'str' },
    'uid':                      { 'default':  None,    'type': 'str' },
    'unblink':                  { 'default':  None,    'type': 'str' },
    'unlock':                   { 'default':  None,    'type': 'str' },
    'update':                   { 'default':  False,   'type': 'bool' },
    'user':                     { 'default':  None,    'type': 'str' },
    'userindex':                { 'default':  None,    'type': 'str' },
    'username':                 { 'default':  None,    'type': 'str' },
    'usesshkey':                { 'default':  True,    'type': 'bool' },
    'value':                    { 'default':  None,    'type': 'str' },
    'vdkey':                    { 'default':  None,    'type': 'str' },
    'verbose':                  { 'default':  False,   'type': 'bool' },
    'vflash':                   { 'default':  False,   'type': 'bool' },
    'view':                     { 'default':  False,   'type': 'bool' },
    'waittime':                 { 'default':  None,    'type': 'str' },
    'weekofmonth':              { 'default':  None,    'type': 'str' },
    'wom':                      { 'default':  None,    'type': 'str' },
    'writepolicy':              { 'default':  None,    'type': 'str' },
    'zip':                      { 'default':  None,    'type': 'str' }
  }
  module = AnsibleModule(argument_spec = fields)

  stdout  = ""
  stderr  = ""
  rc      = 1
  command = ""
  subroutine = ""

  if module.params['bmctype'] == "idrac":
    switches = dict([
    ('action',                  '-a '),
    ('aftertime',               '-r '),
    ('alertcategory',           '-c '),
    ('all',                     '--all'),
    ('auditcategory',           '-a '),
    ('apply',                   '-a '),
    ('applyreboot',             '-a '),
    ('assign',                  '-assign '),
    ('backuppassphrase',        '-n '),
    ('beforetime',              '-e '),
    ('binarymode',              '-b '),
    ('blink',                   'blink:'),
    ('cancelbgi',               'cancelbgi:'),
    ('cancelcheck',             'cancelcheck:'),
    ('cancelrebuild',           'cancelrebuild:'),
    ('capacityexpansion',       'capacityexpansion:'),
    ('category',                '-c '),
    ('ccheck',                  'ccheck:'),
    ('certtype',                '-t '),
    ('city',                    '-city '),
    ('clearconfig',             'clearconfig:'),
    ('clone',                   '--clone'),
    ('closeallsessions',        '-a'),
    ('compact',                 '-c'),
    ('comment',                 '-m '),
    ('company',                 '-company '),
    ('complete',                '--complete'),
    ('configurations',          '-c'),
    ('configpassphrase',        '-n '),
    ('connect',                 '-c'),
    ('connectimage',            '-c'),
    ('converttononraid',        'converttononraid:'),
    ('converttoraid',           'converttoraid:'),
    ('count',                   '-c '),
    ('country',                 '-country '),
    ('createsecuritykey',       'createsecuritykey:'),
    ('createvd',                'createvd:'),
    ('cryptographicerase',      'cryptographicerase:'),
    ('current',                 '-current'),
    ('datetime',                '-d'),
    ('dayofmonth',              '-dom '),
    ('dayofweek',               '-dow '),
    ('delete',                  '-d'),
    ('deletesecuritykey',       'deletesecuritykey:'),
    ('deletevd',                'deletevd:'),
    ('dhcp',                    '-d'),
    ('dhcp6',                   '-d6'),
    ('details',                 '-o'),
    ('discardcache',            'discardcache:'),
    ('disconnect',              '-d'),
    ('disconnectimage',         '-d'),
    ('diskcachepolicy',         '-dcp '),
    ('displaybios',             '-b'),
    ('displaycommon',           '-c'),
    ('displaycpld',             '-c'),
    ('displayidrac',            '-d'),
    ('displayidsdm',            '-i'),
    ('displayipv4',             '-4'),
    ('displayipv6',             '-6'),
    ('displaynumber',           '-d'),
    ('displaynumberofrecords',  '-d'),
    ('displayonlyraw',          '-R'),
    ('displayraw',              '-E'),
    ('displaytotal',            '-i'),
    ('dom',                     '-dom '),
    ('dow',                     '-dow '),
    ('downloadlocation',        '-d '),
    ('dstpd',                   '-dstpd '),
    ('emms',                    'emms:'),
    ('enable6',                 '-o'),
    ('enclosures',              'enclosures:'),
    ('encryptvd',               'encryptvd:'),
    ('entitlementid',           '-e '),
    ('expirationtime',          '-e '),
    ('file',                    '-f '),
    ('filename',                '-f '),
    ('filter',                  '-f '),
    ('filters',                 '-c '),
    ('force',                   '-f'),
    ('forceoffline',            'forceoffline:'),
    ('forceonline',             'forceonline:'),
    ('forcereset',              '-f'),
    ('format',                  '-f '),
    ('fqdds',                   '-c'),
    ('fqdd',                    '-fqdd '),
    ('frequency',               '-s '),
    ('fromtime',                '-r '),
    ('ftpserver',               '-f '),
    ('get',                     '-g '),
    ('generate',                '-g '),
    ('group',                   '-g '),
    ('groupname',               '-g '),
    ('hotspare',                'hotspare:'),
    ('id',                      '-i '),
    ('ignoreheaders',           '-A'),
    ('importconfig',            'importconfig:'),
    ('index',                   '-i '),
    ('init',                    'init:'),
    ('interval',                '-r '),
    ('jobid',                   '-i '),
    ('jobindex',                '-i '),
    ('key',                     '-key '),
    ('keysubtype',              '-k '),
    ('keyindex',                '-k '),
    ('keytext',                 '-t '),
    ('keytype',                 '-t '),
    ('level',                   '-level '),
    ('ledstate',                '-l '),
    ('location',                 '-l '),
    ('logtype',                 '-t '),
    ('mdtype',                  '-mdtype '),
    ('messageid',               '-i '),
    ('mode',                    '-m '),
    ('modifysecuritykey',       'modifysecuritykey:'),
    ('module',                  '-m '),
    ('name',                    '-name '),
    ('newpasswd',               '-newpasswd '),
    ('newraidlevel',            '-new_rl '),
    ('nopreserve',              '--nopreserve'),
    ('notifications',           '-n '),
    ('optimized',               '-o'),
    ('outputfile',              '-f '),
    ('outputtype',              '-t '),
    ('override',                '-o'),
    ('panumber',                '-panumber '),
    ('passphrase',              '-p '),
    ('passwd',                  '-passwd '),
    ('password',                '-p '),
    ('path',                    '-d '),
    ('patrolread',              'patrolread:'),
    ('pcode',                   '-pcode '),
    ('pdisks',                  'pdisks:'),
    ('pdkey',                   '-pdkey:'),
    ('pending',                 '-pending'),
    ('pfname',                  '-pfname '),
    ('plname',                  '-plname '),
    ('pmailid',                 '-pmailid '),
    ('pmnumber',                '-pmnumber '),
    ('power',                   '-s '),
    ('powerstate',              '-s '),
    ('preparetoremove',         'preparetoremove'),
    ('propertyname',            '-p '),
    ('proxy',                   '--proxy'),
    ('proxyhost',               '-ph '),
    ('proxyhostname',           '-ph '),
    ('proxypassword',           '-pp '),
    ('proxyport',               '-po '),
    ('proxytype',               '-po '),
    ('proxyuser',               '-pu '),
    ('proxyusername',           '-pu '),
    ('put',                     '-p'),
    ('raidlevel',               '-rl '),
    ('raidlevelmigration',      'raidlevelmigration:'),
    ('readpolicy',              '-rp '),
    ('reboottype',              '-r '),
    ('realtime',                '--realtime'),
    ('rebuild',                 'rebuild:'),
    ('recordperline',           '-o '),
    ('records',                 '-c '),
    ('recurrence',              '-r '),
    ('refkey',                  '--refkey '),
    ('rekey',                   'rekey:'),
    ('renamevd',                'renamevd:'),
    ('replacephysicaldisk',     'replacephysicaldisk:'),
    ('repeat',                  '-rp '),
    ('resetconfig',             'resetconfig:'),
    ('rollback',                '-r'),
    ('sanumber',                '-sanumber '),
    ('secureerase',             'secureerase:'),
    ('sekmindex',               '-i '),
    ('sekmserver1',             '-p '),
    ('sekmserver2',             '-s '),
    ('sequencenumber',          '-q '),
    ('sessionid',               '-i '),
    ('sessionusername',         '-i '),
    ('setbootvd',               'setbootvd:'),
    ('setencryptionmode',       'setencryptionmode:'),
    ('severity',                '-s '),
    ('sfname',                  '-sfname '),
    ('shutdowntype',            '-b '),
    ('shareusername',           '-u '),
    ('sharepassword',           '-p '),
    ('sharelocation',           '-l '),
    ('size',                    '-size '),
    ('slname',                  '-slname '),
    ('smailid',                 '-smailid '),
    ('smnumber',                '-smnumber '),
    ('speed',                   '-speed '),
    ('sshkeyfile',              '-f '),
    ('sshkeytext',              '-t '),
    ('start',                   '-s '),
    ('starttime',               '-s '),
    ('start-date',              '-d '),
    ('start-record',            '-s '),
    ('start-time',              '-t '),
    ('state',                   '-state '),
    ('static',                  '-s'),
    ('static6',                 '-s6'),
    ('status',                  '-s'),
    ('street1',                 '-street1 '),
    ('street2',                 '-street2 '),
    ('stripesize',              '-ss '),
    ('subcategory',             '-b '),
    ('t10pienable',             '-T10PIEnable'),
    ('tftpserver',              '-a '),
    ('time',                    '-time '),
    ('transactionid',           '-t '),
    ('type',                    '-t '),
    ('uid',                     '-uid '),
    ('unblink',                 'unblink:'),
    ('unlock',                  'unlock:'),
    ('update',                  '-u'),
    ('user',                    '-u '),
    ('username',                '-u '),
    ('userindex',               '-i '),
    ('vdkey',                   '-vdkey:'),
    ('verbose',                 '-v'),
    ('vflash',                  '--vFlash'),
    ('view',                    '-v'),
    ('waittime',                '-w '),
    ('weekofmonth',             '-wom '),
    ('wom',                     '-wom '),
    ('writepolicy',             '-wp '),
    ('zip',                     '-zip')
  ]) 

  value = ""

  if module.params['bmctype'] == None:
    if re.search("_", module._name):
      module.params['bmctype'] = module._name.split("_")[0] 
    else:
      module.params['bmctype'] = module._name

  if re.search(r"true|yes", str(module.params['execute']).lower()):
    module.params['execute'] = True
  else:
    module.params['execute'] = False

  if not module.params['method'] == "racadm":
    if re.search(r"true|yes", str(module.params['usesshkey']).lower()):
      module.params['usesshkey'] = True
    else:
      module.params['usesshkey'] = False
    if module.params['sshkeyfile'] == None:
      home_dir = os.environ['HOME']
      ssh_key_file = "%s/.ssh/id_%s" % (home_dir, module.params['sshkeytype'])
      if exists(ssh_key_file):
        module.params['sshkeyfile'] = ssh_key_file

  if module.params['bmctype'] == "amt": 
    if not re.search(r"http", module.params['method']):
      module.params['method'] == "http"
    if module.params['method'] == "http":
      module.params['bmcport'] = "16992"
    else:
      module.params['bmcport'] = "16993"
    if module.params['function'] == "set":
      (stdout, stderr, rc, command, subroutine) = set_amt_value(module)
    else:
      (stdout, stderr, rc, command, subroutine) = get_amt_value(module)

  if re.search(r"ssh",module.params['method']):
    import pexpect
    if module.params['bmcpassword'] == None:
      module.params['usesshkey'] = True
    else:
      if re.search(r"[A-Z]|[a-z]|[0-9]", module.params['bmcpassword']):
        module.params['usesshkey'] = False
      else:
        module.params['usesshkey'] = True
    if module.params['method'] == "ssh" and module.params['bmctype'] == "idrac":
      (stdout, stderr, rc, command, value, subroutine) = get_set_idrac_value(module, switches)

  if module.params['method'] == "racadm" and module.params['bmctype'] == "idrac":
    (stdout, stderr, rc, command, value, subroutine) = get_set_idrac_value(module, switches)

  if not stderr:
    stderr = ""
  if not stdout:
    stdout = ""
  if len(stdout) == 0 and len(stderr) > 0:
    stdout = stderr

  module.exit_json(
    _name       = module._name,
    changed     = True,
    stdout      = stdout, 
    stderr      = stderr, 
    rc          = rc, 
    command     = command, 
    value       = value,
    subroutine  = subroutine,
    meta        = module.params
  )

if __name__ == '__main__':
  main()
